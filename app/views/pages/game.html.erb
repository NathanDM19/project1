<script>
    var config = {
      type: Phaser.AUTO,
      width: 800,
      height: 600,
      physics: {
          default: 'arcade',
          arcade: {
              gravity: { y: 0 },
              debug: false
          }
      },
      scene: {
          preload: preload,
          create: create,
          update: update
      }
    };
    let currentCharacter = <%= @current_character.id %>
    let singleEnemy = true;
    let spacePressed = false;
    let aliveEnemy = {}
    let enemy = {}
    let enemyCounter = 0
    let enemyId = <%= Enemy.last.id + 1 %>
    // let enemyHealth = 100;
    let health = 100;
    let speed = 5;
    let xPos = 0;
    let yPos = 0;
    let xPosTemp = 0;
    let yPosTemp = 0;
    let direction = 'turn'
    let directionTemp;
    let player
    let playerDetails = {};
    let playerCreated = {};;
    let playerSprites = {};
    let playerNames = {};
    let playerHealthBarBack = {};
    let playerHealthBar = {};
    var objects = {};
    let followingBoo = {}
    let gameEdit
    let game = new Phaser.Game(config);
    let gold = <%= @current_character.gold %>
    function preload() {
      //Loading the images in
      this.load.spritesheet('player', 'assets/player.png', { frameWidth: 64, frameHeight: 64 });
      this.load.image('platform', 'assets/platform.png');
      this.load.image('background', 'assets/background.png')
      this.load.image('backgroundTop', 'assets/backgroundtop.png')
      this.load.image('backgroundTop2', 'assets/backgroundtop2.png')
      this.load.image('backgroundLeft', 'assets/backgroundleft.png')
      this.load.image('healthBar', 'assets/healthbar.png')
      this.load.image('healthBarBack', 'assets/healthbarback.png')
      this.load.spritesheet('undead', 'assets/enemies/undeadWalk.png', { frameWidth: 56, frameHeight: 48});
      gameEdit = this
      // console.log(gameEdit)
    }
    function create() {
      // gameEdit = this
      // console.log(this)

      //Loading the sky background and the character
      platforms = this.physics.add.staticGroup();
      platforms.create(-83, 260, 'platform').setScale(1, 0.1).refreshBody()
      platforms.create(198, 246, 'platform').setScale(0.36, 0.1).refreshBody()
      platforms.create(595, 309, 'platform').setScale(0.28, 0.1).refreshBody()
      platforms.create(172, 550, 'platform').setScale(1, 0.1).refreshBody()
      platforms.create(-5, 450, 'platform').setScale(0.1, 20).refreshBody()
      platforms.create(290, 261, 'platform').setScale(0.08, 0.1).refreshBody()
      platforms.create(314, 277, 'platform').setScale(0.03, 0.1).refreshBody()
      platforms.create(18, 274, 'platform').setScale(0.05, 0.1).refreshBody()
      platforms.create(352, 294, 'platform').setScale(0.1, 0.1).refreshBody()
      platforms.create(200, 165, 'platform').setScale(7, 0.1).refreshBody()
      platforms.create(483, 296, 'platform').setScale(0.2, 0.1).refreshBody()
      platforms.create(654, 250, 'platform').setScale(0.01, 3).refreshBody()
      platforms.create(574, 550, 'platform').setScale(0.65, 0.1).refreshBody()
      platforms.create(1130, 195, 'platform').setScale(2.33, 0.11).refreshBody()
      this.add.image(800, 1000, 'background')
      this.add.image(320, -120, 'backgroundTop')
      this.add.image(1120, -120, 'backgroundTop2')
      this.add.image(-320, 360, 'backgroundLeft')
      //Making a platforms class to add platforms.create(x, y, name)
      // platforms.create(400, 568, 'platform').setScale(2).refreshBody(); // setScale for size, need refreshBody after?
      player = this.physics.add.sprite(400, 490, 'player');  //.setScrollFactor(0);
      player.body.setSize(24, 42)
      // enemy = this.physics.add.sprite(100, 700, 'undead') //DEFAULT is 3. WALK 5-12 ISH
      //Adding collision to end of screen
      // player.setCollideWorldBounds(true);

      // Collision between player and platforms
      this.physics.add.collider(player, platforms);
      // Animation for sprite
      this.anims.create({
          key: 'left',
          frames: this.anims.generateFrameNumbers('player', { start: 29 , end: 31 }),
          frameRate: 10,
          repeat: -1
      });
      this.anims.create({
          key: 'turn',
          frames: [ { key: 'player', frame: 0 } ],
          frameRate: 20
      });
      this.anims.create({
          key: 'right',
          frames: this.anims.generateFrameNumbers('player', { start: 29, end: 31 }),
          frameRate: 10,
          repeat: -1
      });
      this.anims.create({
          key: 'punch',
          frames: [ { key: 'player', frame: 39} ],
          frameRate: 20
      })
      this.anims.create({
          key: 'undeadWalk',
          frames: this.anims.generateFrameNumbers('undead', {start: 0, end: 19}),
          frameRate: 10,
          repeat: -1
      })
      this.anims.create({
        key: 'undeadStand',
        frames: [ { key: 'undead', frame: 0} ],
        frameRate: 20
      })
      // Adding keyboard functionality
      cursors = this.input.keyboard.createCursorKeys();
      // Follows player // Need to add so player is lower on screen
      // this.cameras.main.setSize(800, 600);
      this.cameras.main.startFollow(player);
      playerNameText = this.add.text(200, 200, `<%= @current_character.name %>`, { fontSize: '12px', fill: '#FFF' });
      healthBarBack = this.add.image(200, 200, 'healthBarBack')
      healthBar = this.add.image(200, 200, 'healthBar')
      aliveEnemy['undead1'] = 0
      aliveEnemy['undead2'] = 0
      let enemyObject = <%= Enemy.all.to_json.html_safe %>
      // console.log(enemyObject)
      for (let key in enemyObject) {
        if (enemyObject[key]['total'] === 1) {
          aliveEnemy['undead1'] += 1
          aliveEnemyId = enemyObject[key]['id']
          aliveEnemyX = enemyObject[key]['x']
          aliveEnemyY = enemyObject[key]['y']
          console.log("loading enemy with" + aliveEnemyId)
          App.enemy.create(aliveEnemyId, 1, aliveEnemyX, aliveEnemyY, 'login', currentCharacter)
          enemyId -= 1
        }
        if (enemyObject[key]['total'] === 2) {
          aliveEnemy['undead2'] += 1
          aliveEnemyId = enemyObject[key]['id']
          aliveEnemyX = enemyObject[key]['x']
          aliveEnemyY = enemyObject[key]['y']
          console.log("loading enemy with" + aliveEnemyId)

          App.enemy.create(aliveEnemyId, 2, aliveEnemyX, aliveEnemyY, 'login', currentCharacter)
          enemyId -= 1
        }
      }
      if (aliveEnemy['undead1'] === 0) {
        // console.log("Creating undead1 with id" + enemyId)
        aliveEnemy['undead1'] += 1
        App.enemy.create(enemyId, 1, 0, 0, 'create', currentCharacter)
      }
      if (aliveEnemy['undead2'] === 0) {
        // console.log("Creating undead2 with id" + enemyId)
        aliveEnemy['undead2'] += 1
        App.enemy.create(enemyId, 2, 0, 0, 'create', currentCharacter)
      }
      // if (aliveEnemy['undead'] > 0) {
      // } else {
      //   App.enemy.create(enemyId, 0, 0, 0, 'create')
      // }
      // console.log(player)
      // game.debug.body(player);
    }
    function update() {
      // testing = testVar
      // Things that will happen after game initially loads
      // Movement for player
      // if (enemyDetails['enemyHealth'] !== undefined) {
      //   enemyHealth = enemyDetails['enemyHealth']
      // }
      for (let key in playerDetails) {
        if (parseInt(key) !== currentCharacter) {
          if (!playerCreated[key]) {
            playerSprites[`player${key}`] = gameEdit.physics.add.sprite(400, 490, 'player');
            playerNames[`player${key}`] = gameEdit.add.text(100, 100, `${playerDetails[key]['name']}`, {fontSize: '12px', fill: '#FFF'});
            playerHealthBarBack[`player${key}`] = gameEdit.add.image(200, 200, 'healthBarBack');
            playerHealthBar[`player${key}`] = gameEdit.add.image(200, 200, 'healthBar');
            // console.log(playerDetails[key][name])
            gameEdit.physics.add.collider(playerSprites[`player${key}`], platforms);
            // console.log(playerDetails[`${key}Created`])
            playerCreated[key] = true
          }
          if (playerSprites[`player${key}`].x !== playerDetails[key]['xPos'] || playerSprites[`player${key}`].y !== playerDetails[key]['yPos'] || playerDetails[key]['xPos'] - ((100-playerDetails[key]['health'])/4) !== playerHealthBar[`player${key}`].x || playerDetails[key]['direction'] !== playerDetails[key]['tempDirection']) {
            playerDetails[key]['tempDirection'] = playerDetails[key]['direction']
            // console.log(playerDetails[key]['direction'])
            playerSprites[`player${key}`].x = playerDetails[key]['xPos'];
            playerSprites[`player${key}`].y = playerDetails[key]['yPos'];
            playerSprites[`player${key}`].anims.play(playerDetails[key]['direction'], true);
            if (playerDetails[key]['direction'] === 'left') {
              playerSprites[`player${key}`].flipX = true
            } else if (playerDetails[key]['direction'] === 'right') {
              playerSprites[`player${key}`].flipX = false
            }
            playerNames[`player${key}`].x = playerDetails[key]['xPos'] - 27;
            playerNames[`player${key}`].y = playerDetails[key]['yPos'] - 57;
            playerHealthBarBack[`player${key}`].x = playerDetails[key]['xPos'];
            playerHealthBarBack[`player${key}`].y = playerDetails[key]['yPos'] - 36;
            playerHealthBar[`player${key}`].setScale(playerDetails[key]['health']/100, 1);
            playerHealthBar[`player${key}`].x = playerDetails[key]['xPos'] - ((100-playerDetails[key]['health'])/4);
            playerHealthBar[`player${key}`].y = playerDetails[key]['yPos'] - 36;
          }
        }
      }
      // console.log(playerDetails)
      xPos = player.x
      yPos = player.y
      playerNameText.x = player.x - 27
      playerNameText.y = player.y - 57
      healthBarBack.x = player.x
      healthBarBack.y = player.y - 36
      healthBar.setScale(health/100, 1)
      healthBar.x = player.x - ((100-health)/4)
      healthBar.y = player.y - 36


      // enemyHealthBarBack.x = enemy.x
      // enemyHealthBarBack.y = enemy.y - 36
      // enemyHealthBar.setScale(enemyHealth/100, 1)
      // enemyHealthBar.x = enemy.x - ((100-enemyHealth)/4)
      // enemyHealthBar.y = enemy.y - 36
      // enemy.x = 100
      // enemy.y = 700
      if (xPos !== xPosTemp || yPos !== yPosTemp || direction !== directionTemp || health !== healthTemp) {
        App.item.create(gold, currentCharacter, xPos, yPos, direction, health)
        xPosTemp = xPos
        yPosTemp = yPos
        directionTemp = direction
        healthTemp = health

      }
      // PLAYER MOVEMENT
      if (cursors.left.isDown) {
        player.setVelocityX(-160);
        direction = 'left';
        player.anims.play('left', true);
        player.flipX = true;
      }
      if (cursors.right.isDown)
      {
        player.setVelocityX(160)
        direction = 'right';
        player.anims.play('right', true);
        player.flipX = false;
      }
      if (cursors.up.isDown)
      {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn'
          player.anims.play('right', true);
        }
        player.setVelocityY(-160)
      }
      if (cursors.down.isDown) {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn';
          player.anims.play('right', true)
        }
        player.setVelocityY(160)
      }
      if (cursors.left.isUp && cursors.right.isUp) {
        direction = 'turn'
        player.setVelocityX(0)
      }
      if (cursors.up.isUp && cursors.down.isUp) {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn'
          player.anims.play('turn')
        }
        player.setVelocityY(0)
      }
      // BASIC ATTACK
      if (cursors.space.isDown) {
        player.anims.play('punch')
        direction = 'punch'
      }
      // ENEMY MOVEMENT
      for (let key in enemy) {
        let followingX
        let followingY
        if (enemy[key]['following'] === 0 || enemy[key]['following'] === currentCharacter) {
          if (enemy[key]['enemy'].x - player.x < 200 && enemy[key]['enemy'].x - player.x > 0 &&
             (enemy[key]['enemy'].y - player.y < 200 && enemy[key]['enemy'].y - player.y > 0 ||
             player.y - enemy[key]['enemy'].y < 200 && player.y - enemy[key]['enemy'].y > 0)){
            enemy[key]['enemy'].setVelocityX(((enemy[key]['enemy'].x - player.x)/2.2)*-1)
            followingX = true
            // console.log("LEFT")
          }
          else if (player.x - enemy[key]['enemy'].x < 200 && player.x - enemy[key]['enemy'].x > 0 &&
          (enemy[key]['enemy'].y - player.y < 200 && enemy[key]['enemy'].y - player.y > 0 ||
          player.y - enemy[key]['enemy'].y < 200 && player.y - enemy[key]['enemy'].y > 0)) {
            enemy[key]['enemy'].setVelocityX((player.x - enemy[key]['enemy'].x)/2.2)
            followingX = true
            // console.log("RIGHT")
          }
          else {
            enemy[key]['enemy'].setVelocityX(0)
            followingX = false

          }
          if (enemy[key]['enemy'].y - player.y < 200 && enemy[key]['enemy'].y - player.y > 0 &&
             (player.x - enemy[key]['enemy'].x < 200 && player.x - enemy[key]['enemy'].x > 0 ||
             enemy[key]['enemy'].x - player.x < 200 && enemy[key]['enemy'].x - player.x > 0)){
            // console.log("UP")
            enemy[key]['enemy'].setVelocityY(((enemy[key]['enemy'].y - player.y)/2.2)*-1)
            followingY = true
          }
          else if (player.y - enemy[key]['enemy'].y < 200 && player.y - enemy[key]['enemy'].y > 0 &&
             (enemy[key]['enemy'].x - player.x < 200 && enemy[key]['enemy'].x - player.x > 0 ||
             player.x - enemy[key]['enemy'].x < 200 && player.x - enemy[key]['enemy'].x > 0)){
            enemy[key]['enemy'].setVelocityY((player.y - enemy[key]['enemy'].y)/2.2)
            followingY = true
            // console.log("DOWN")
          }
          else {
            enemy[key]['enemy'].setVelocityY(0)
            followingY = false
          }
        }
        if (followingX || followingY) {
          enemy[key]['enemy'].anims.play('undeadWalk', true)
        }
        if (enemy[key]['position']['x'] !== enemy[key]['enemy'].x || enemy[key]['position']['y'] !== enemy[key]['enemy'].y) {
          if (followingY || followingX) {
            followingBoo[key] = true
            App.enemy.create(key, currentCharacter, enemy[key]['enemy'].x, enemy[key]['enemy'].y, 'move', currentCharacter)
          }
        }
        if (followingBoo[key] && !followingY && !followingX) {
          followingBoo[key] = false
          App.enemy.create(key, -1, enemy[key]['enemy'].x, enemy[key]['enemy'].y, 'move', currentCharacter)
        }
        enemy[key]['healthBarBack'].x = enemy[key]['enemy'].x
        enemy[key]['healthBarBack'].y = enemy[key]['enemy'].y - 36
        enemy[key]['healthBar'].x = enemy[key]['enemy'].x - ((100-enemy[key]['health'])/4)
        enemy[key]['healthBar'].y = enemy[key]['enemy'].y - 36
      }
      for (let key in enemy) {
        if (enemy[key]['health'] <= 0 && enemy[key]['enemy']['active']) {
          enemy[key]['enemy'].disableBody(true, true)
          enemy[key]['healthBar'].setScale(0)
          enemy[key]['healthBarBack'].setScale(0)
        }
        else if (enemy[key]['health'] <= 0 && !enemy[key]['enemy']['active']) {
          enemy[key]['healthBar'].setScale(0)
        }
      }
    }

    function damage(id, enemyDamage) {
      App.enemy.create(id, enemyDamage, 0, 0, 'damage', currentCharacter)
    }
    function databaseEnemy(x, y, enemyType) {
      console.log("Creating database entry for "+enemyId)
      App.enemy.create(enemyId, enemyType, x, y, 'database', currentCharacter)
    }
    function attack() {
      if (cursors.space.isDown) {
        spacePressed = true
      }
      if (cursors.space.isUp && spacePressed) {
        spacePressed = false;
        // enemyHealth -= 10
      }
    }
    window.setInterval(function() {
      App.item.create(gold, currentCharacter, xPos, yPos, direction, health)
    }, 1000)
</script>















<!-- // function preload ()
// {
  //   this.load.image('sky', '/assets/sky.png');
  //   this.load.image('ground', '/assets/platform.png');
  //   this.load.image('star', '/assets/star.png');
  //   this.load.image('bomb', '/assets/bomb.png');
  //   this.load.spritesheet('dude',
  //     '/assets/dude.png',
  //     { frameWidth: 32, frameHeight: 48 }
  //   );
  // }
  //
  // function create ()
  // {
    //   this.add.image(400, 300, 'sky');
    //
    //   platforms = this.physics.add.staticGroup();
    //
    //   platforms.create(400, 568, 'ground').setScale(2).refreshBody();
    //
    //   platforms.create(600, 400, 'ground');
    //   platforms.create(50, 250, 'ground');
    //   platforms.create(750, 220, 'ground');
    //
    //   player = this.physics.add.sprite(100, 450, 'dude');
    //   player2 = this.physics.add.sprite(200, 450, 'dude')
    //   // player.body.setGravityY(-301)
    //   player.setBounce(0.2);
    //   player.setCollideWorldBounds(true);
    //   player2.setCollideWorldBounds(true);
    //
    //   this.anims.create({
      //       key: 'left',
      //       frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
      //       frameRate: 10,
      //       repeat: -1
      //   });
      //
      //   this.anims.create({
        //       key: 'turn',
        //       frames: [ { key: 'dude', frame: 4 } ],
        //       frameRate: 20
        //   });
        //
        //   this.anims.create({
          //       key: 'right',
          //       frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
          //       frameRate: 10,
          //       repeat: -1
          //   });
          //   this.physics.add.collider(player, platforms);
          //   this.physics.add.collider(player2, platforms)
          //
          //   cursors = this.input.keyboard.createCursorKeys();
          //
          //   stars = this.physics.add.group({
            //     key: 'star',
            //     repeat: 11,
            //     setXY: { x: 12, y: 0, stepX: 70 }
            //   });
            //
            //   stars.children.iterate(function (child) {
              //     child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
              //   });
              //
              //   this.physics.add.collider(stars, platforms);
              //   this.physics.add.overlap(player, stars, collectStar, null, this);
              //
              //   function collectStar (player, star)
              //   {
                //       star.disableBody(true, true);
                //       gold += 10;
                //       goldText.setText('Gold: ' + gold);
                //
                //       if (stars.countActive(true) === 0)
                //       {
                  //           stars.children.iterate(function (child) {
                    //
                    //               child.enableBody(true, child.x, 0, true, true);
                    //
                    //           });
                    //
                    //           var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);
                    //
                    //           var bomb = bombs.create(x, 16, 'bomb');
                    //           bomb.setBounce(1);
                    //           bomb.setCollideWorldBounds(true);
                    //           bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
                    //           bomb.allowGravity = false;
                    //
                    //       }
                    //   }
                    //   let gold = <%= @gold %>
                    //   let goldText;
                    //   goldText = this.add.text(16, 16, `Gold: ${gold}`, { fontSize: '32px', fill: '#000' });
                    //
                    //   bombs = this.physics.add.group();
                    //
                    //   this.physics.add.collider(bombs, platforms);
                    //
                    //   this.physics.add.collider(player, bombs, hitBomb, null, this);
                    //
                    //   function hitBomb (player, bomb)
                    //   {
                      //       this.physics.pause();
                      //
                      //       player.setTint(0xff0000);
                      //
                      //       player.anims.play('turn');
                      //
                      //       gameOver = true;
                      //   }
                      // }
                      //
                      // function update ()
                      // {
                        //   // player2.setVelocityX(-5)
                        //   // if (player2.x < 100) {
                          //   //   player2.setX(1000)
                          //   //   player2.setY(170)
                          //   // }
                          //   if (cursors.left.isDown)
                          //   {
                            //       player.setVelocityX(-160);
                            //
                            //       player.anims.play('left', true);
                            //   }
                            //   else if (cursors.right.isDown)
                            //   {
                              //       player.setVelocityX(160);
                              //
                              //       player.anims.play('right', true);
                              //   }
                              //   else
                              //   {
                                //       player.setVelocityX(0);
                                //
                                //       player.anims.play('turn');
                                //   }
                                //
                                //   if (cursors.up.isDown && player.body.touching.down)
                                //   {
                                  //       player.setVelocityY(-330);
                                  //   }
                                  // } -->
