<script>
    var config = {
      type: Phaser.AUTO,
      width: 800,
      height: 600,
      physics: {
          default: 'arcade',
          arcade: {
              gravity: { y: 0 },
              debug: false
          }
      },
      scene: {
          preload: preload,
          create: create,
          update: update
      }
    };
    let currentCharacter = <%= @current_character.id %>
    let health = 100;
    let speed = 5;
    let xPos = 0;
    let yPos = 0;
    let xPosTemp = 0;
    let yPosTemp = 0;
    let direction = 'turn'
    let directionTemp;
    let playerDetails = {};
    let playerCreated = {};;
    let playerSprites = {};
    let playerNames = {};
    let playerHealthBarBack = {};
    let playerHealthBar = {};
    var objects = {};
    let gameEdit
    let game = new Phaser.Game(config);
    let gold = <%= @current_character.gold %>
    function preload() {
      //Loading the images in
      this.load.spritesheet('dude', 'assets/dude3.png', { frameWidth: 32, frameHeight: 42 });
      this.load.image('platform', 'assets/platform.png');
      this.load.image('background', 'assets/background.png')
      this.load.image('backgroundTop', 'assets/backgroundtop.png')
      this.load.image('backgroundLeft', 'assets/backgroundleft.png')
      this.load.image('healthBar', 'assets/healthbar.png')
      this.load.image('healthBarBack', 'assets/healthbarback.png')
    }
    function create() {
      gameEdit = this

      //Loading the sky background and the character
      platforms = this.physics.add.staticGroup();
      platforms.create(-80, 275, 'platform')
      platforms.create(190, 260, 'platform').setScale(0.36,1).refreshBody()
      platforms.create(165, 552, 'platform')
      platforms.create(-5, 450, 'platform').setScale(0.1, 20).refreshBody()
      platforms.create(280, 272, 'platform').setScale(0.08, 1).refreshBody()
      platforms.create(303, 290, 'platform').setScale(0.03, 1).refreshBody()
      platforms.create(20, 287, 'platform').setScale(0.05, 0.9).refreshBody()
      platforms.create(340, 306, 'platform').setScale(0.1, 1).refreshBody()
      platforms.create(200, 184, 'platform').setScale(2.2, 1).refreshBody()
      this.add.image(775, 975, 'background')
      this.add.image(320, -120, 'backgroundTop')
      this.add.image(-320, 360, 'backgroundLeft')
      //Making a platforms class to add platforms.create(x, y, name)
      // platforms.create(400, 568, 'platform').setScale(2).refreshBody(); // setScale for size, need refreshBody after?
      player = this.physics.add.sprite(400, 490, 'dude')//.setScrollFactor(0);
      //Adding collision to end of screen
      // player.setCollideWorldBounds(true);

      // Collision between player and platforms
      this.physics.add.collider(player, platforms);
      // Animation for sprite
      this.anims.create({
          key: 'left',
          frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
          frameRate: 10,
          repeat: -1
      });
      this.anims.create({
          key: 'turn',
          frames: [ { key: 'dude', frame: 4 } ],
          frameRate: 20
      });
      this.anims.create({
          key: 'right',
          frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
          frameRate: 10,
          repeat: -1
      });
      // Adding keyboard functionality
      cursors = this.input.keyboard.createCursorKeys();
      // Follows player // Need to add so player is lower on screen
      // this.cameras.main.setSize(800, 600);
      this.cameras.main.startFollow(player);
      playerNameText = this.add.text(200, 200, `<%= @current_character.name %>`, { fontSize: '12px', fill: '#FFF' });
      healthBarBack = this.add.image(200, 200, 'healthBarBack')
      healthBar = this.add.image(200, 200, 'healthBar')

    }

    function update() {
      // testing = testVar
      // Things that will happen after game initially loads
      // Movement for player
      for (let key in playerDetails) {
        if (parseInt(key) !== currentCharacter) {
          if (!playerCreated[key]) {
            playerSprites[`player${key}`] = gameEdit.physics.add.sprite(400, 490, 'dude');
            playerNames[`player${key}`] = gameEdit.add.text(100, 100, `${playerDetails[key]['name']}`, {fontSize: '12px', fill: '#FFF'});
            playerHealthBarBack[`player${key}`] = gameEdit.add.image(200, 200, 'healthBarBack');
            playerHealthBar[`player${key}`] = gameEdit.add.image(200, 200, 'healthBar');
            // console.log(playerDetails[key][name])
            gameEdit.physics.add.collider(playerSprites[`player${key}`], platforms);
            // console.log(playerDetails[`${key}Created`])
            playerCreated[key] = true
          }
          if (playerSprites[`player${key}`].x !== playerDetails[key]['xPos'] || playerSprites[`player${key}`].y !== playerDetails[key]['yPos'] || playerDetails[key]['xPos'] - ((100-playerDetails[key]['health'])/4) !== playerHealthBar[`player${key}`].x) {
            playerSprites[`player${key}`].x = playerDetails[key]['xPos'];
            playerSprites[`player${key}`].y = playerDetails[key]['yPos'];
            playerSprites[`player${key}`].anims.play(playerDetails[key]['direction'], true);
            playerNames[`player${key}`].x = playerDetails[key]['xPos'] - 27;
            playerNames[`player${key}`].y = playerDetails[key]['yPos'] - 57;
            playerHealthBarBack[`player${key}`].x = playerDetails[key]['xPos'];
            playerHealthBarBack[`player${key}`].y = playerDetails[key]['yPos'] - 36;
            playerHealthBar[`player${key}`].setScale(playerDetails[key]['health']/100, 1);
            playerHealthBar[`player${key}`].x = playerDetails[key]['xPos'] - ((100-playerDetails[key]['health'])/4);
            playerHealthBar[`player${key}`].y = playerDetails[key]['yPos'] - 36;
          }
        }
      }
      // console.log(playerDetails)
      xPos = player.x
      yPos = player.y
      playerNameText.x = player.x - 27
      playerNameText.y = player.y - 57
      healthBarBack.x = player.x
      healthBarBack.y = player.y - 36
      healthBar.setScale(health/100, 1)
      healthBar.x = player.x - ((100-health)/4)
      healthBar.y = player.y - 36
      if (xPos !== xPosTemp || yPos !== yPosTemp || direction !== directionTemp || health !== healthTemp) {
        App.item.create(gold, currentCharacter, xPos, yPos, direction, health)
        xPosTemp = xPos
        yPosTemp = yPos
        directionTemp = direction
        healthTemp = health
      }
      // if (cursors.left.isUp) {
      //   player.setVelocityX(0)
      //   direction = 'turn'
      // }
      if (cursors.left.isDown) {
        player.setVelocityX(-160)
        direction = 'left'
        player.anims.play('left', true);
      }
      if (cursors.right.isDown)
      {
        player.setVelocityX(160)
        direction = 'right'
        player.anims.play('right', true);
      }
      if (cursors.up.isDown)
      {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn'
          player.anims.play('turn');
        }
        player.setVelocityY(-160)
      }
      if (cursors.down.isDown) {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn';
          player.anims.play('turn')
        }
        player.setVelocityY(160)
      }
      if (cursors.left.isUp && cursors.right.isUp) {
        direction = 'turn'
        player.anims.play('turn')
        player.setVelocityX(0)
      }
      if (cursors.up.isUp && cursors.down.isUp) {
        if (cursors.left.isUp && cursors.right.isUp) {
          direction = 'turn'
          player.anims.play('turn')
        }
        player.setVelocityY(0)
      }

      if (cursors.up.isDown && player.body.touching.down)
      {
          player.setVelocityY(-330);
      }
    }
</script>















<!-- // function preload ()
// {
  //   this.load.image('sky', '/assets/sky.png');
  //   this.load.image('ground', '/assets/platform.png');
  //   this.load.image('star', '/assets/star.png');
  //   this.load.image('bomb', '/assets/bomb.png');
  //   this.load.spritesheet('dude',
  //     '/assets/dude.png',
  //     { frameWidth: 32, frameHeight: 48 }
  //   );
  // }
  //
  // function create ()
  // {
    //   this.add.image(400, 300, 'sky');
    //
    //   platforms = this.physics.add.staticGroup();
    //
    //   platforms.create(400, 568, 'ground').setScale(2).refreshBody();
    //
    //   platforms.create(600, 400, 'ground');
    //   platforms.create(50, 250, 'ground');
    //   platforms.create(750, 220, 'ground');
    //
    //   player = this.physics.add.sprite(100, 450, 'dude');
    //   player2 = this.physics.add.sprite(200, 450, 'dude')
    //   // player.body.setGravityY(-301)
    //   player.setBounce(0.2);
    //   player.setCollideWorldBounds(true);
    //   player2.setCollideWorldBounds(true);
    //
    //   this.anims.create({
      //       key: 'left',
      //       frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
      //       frameRate: 10,
      //       repeat: -1
      //   });
      //
      //   this.anims.create({
        //       key: 'turn',
        //       frames: [ { key: 'dude', frame: 4 } ],
        //       frameRate: 20
        //   });
        //
        //   this.anims.create({
          //       key: 'right',
          //       frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
          //       frameRate: 10,
          //       repeat: -1
          //   });
          //   this.physics.add.collider(player, platforms);
          //   this.physics.add.collider(player2, platforms)
          //
          //   cursors = this.input.keyboard.createCursorKeys();
          //
          //   stars = this.physics.add.group({
            //     key: 'star',
            //     repeat: 11,
            //     setXY: { x: 12, y: 0, stepX: 70 }
            //   });
            //
            //   stars.children.iterate(function (child) {
              //     child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
              //   });
              //
              //   this.physics.add.collider(stars, platforms);
              //   this.physics.add.overlap(player, stars, collectStar, null, this);
              //
              //   function collectStar (player, star)
              //   {
                //       star.disableBody(true, true);
                //       gold += 10;
                //       goldText.setText('Gold: ' + gold);
                //
                //       if (stars.countActive(true) === 0)
                //       {
                  //           stars.children.iterate(function (child) {
                    //
                    //               child.enableBody(true, child.x, 0, true, true);
                    //
                    //           });
                    //
                    //           var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);
                    //
                    //           var bomb = bombs.create(x, 16, 'bomb');
                    //           bomb.setBounce(1);
                    //           bomb.setCollideWorldBounds(true);
                    //           bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
                    //           bomb.allowGravity = false;
                    //
                    //       }
                    //   }
                    //   let gold = <%= @gold %>
                    //   let goldText;
                    //   goldText = this.add.text(16, 16, `Gold: ${gold}`, { fontSize: '32px', fill: '#000' });
                    //
                    //   bombs = this.physics.add.group();
                    //
                    //   this.physics.add.collider(bombs, platforms);
                    //
                    //   this.physics.add.collider(player, bombs, hitBomb, null, this);
                    //
                    //   function hitBomb (player, bomb)
                    //   {
                      //       this.physics.pause();
                      //
                      //       player.setTint(0xff0000);
                      //
                      //       player.anims.play('turn');
                      //
                      //       gameOver = true;
                      //   }
                      // }
                      //
                      // function update ()
                      // {
                        //   // player2.setVelocityX(-5)
                        //   // if (player2.x < 100) {
                          //   //   player2.setX(1000)
                          //   //   player2.setY(170)
                          //   // }
                          //   if (cursors.left.isDown)
                          //   {
                            //       player.setVelocityX(-160);
                            //
                            //       player.anims.play('left', true);
                            //   }
                            //   else if (cursors.right.isDown)
                            //   {
                              //       player.setVelocityX(160);
                              //
                              //       player.anims.play('right', true);
                              //   }
                              //   else
                              //   {
                                //       player.setVelocityX(0);
                                //
                                //       player.anims.play('turn');
                                //   }
                                //
                                //   if (cursors.up.isDown && player.body.touching.down)
                                //   {
                                  //       player.setVelocityY(-330);
                                  //   }
                                  // } -->
